openapi: 3.0.3
info:
  title: Anima API
  version: "1.0.0"
  description: |
    API do Anima (treinos, sessões, sets, overload e perfil do usuário).
    Alguns endpoints consideram o cabeçalho **X-User-ID** como forma simples de autenticação
    (até todos os clientes enviarem JWT). Endpoints administrativos usam **X-Admin-Token**.

servers:
  - url: http://localhost:8081
    description: Local

tags:
  - name: Sessions
  - name: Sets
  - name: Overload
  - name: Me
  - name: Treinos
  - name: Catalog
  - name: Admin
  - name: Planner
  - name: Health

paths:
  /health:
    get:
      tags: [Health]
      summary: Healthcheck
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }

  /api/exercises:
    get:
      tags: [Catalog]
      summary: Lista exercícios
      responses:
        "200":
          description: lista de exercícios
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object

  /api/treinos:
    get:
      tags: [Treinos]
      summary: Lista treinos (paginado)
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                  page: { type: integer }
                  page_size: { type: integer }
                  total_hint: { type: integer }

  /api/treinos/{id}:
    get:
      tags: [Treinos]
      summary: Detalhe do treino
      parameters:
        - $ref: '#/components/parameters/TreinoIdPath'
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
        "404": { $ref: '#/components/responses/NotFound' }
    patch:
      tags: [Treinos]
      summary: Atualiza campos do treino (ex. coach_notes)
      parameters:
        - $ref: '#/components/parameters/TreinoIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "204": { description: atualizado }
        "404": { $ref: '#/components/responses/NotFound' }

  /api/treinos/generate:
    post:
      tags: [Treinos]
      summary: Gera um plano de treino (v1.1)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: ok

  # ============ SESSIONS ============
  /api/sessions:
    get:
      tags: [Sessions]
      summary: Lista sessões (com guarda por dono)
      description: |
        Filtra por `X-User-ID` (se presente) — retorna sessões do usuário **ou** sessões legadas sem `user_id`.
      parameters:
        - $ref: '#/components/parameters/XUserId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/TreinoIdQuery'
        - $ref: '#/components/parameters/FromTS'
        - $ref: '#/components/parameters/ToTS'
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSessionListResponse'
    post:
      tags: [Sessions]
      summary: Cria sessão
      parameters:
        - $ref: '#/components/parameters/XUserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionInput'
            examples:
              example1:
                value:
                  treino_id: 1
                  session_at: "2025-08-29T12:00:00Z"
                  notes: "sessão do user"
      responses:
        "201":
          description: criado
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: integer, format: int64 }
        "400": { $ref: '#/components/responses/BadRequest' }

  /api/sessions/{id}:
    get:
      tags: [Sessions]
      summary: Detalhe da sessão (com guarda por dono)
      parameters:
        - $ref: '#/components/parameters/XUserId'
        - $ref: '#/components/parameters/SessionIdPath'
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSession'
        "404": { $ref: '#/components/responses/NotFound' }

  /api/sessions/update/{id}:
    patch:
      tags: [Sessions]
      summary: Atualiza uma sessão (parcial)
      description: Campos suportados — `completed`, `rpe_session`, `duration_min`, `notes`, `session_at`.
      parameters:
        - $ref: '#/components/parameters/XUserId'
        - $ref: '#/components/parameters/SessionIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchSessionInput'
      responses:
        "200":
          description: sessão atualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSession'
        "400": { $ref: '#/components/responses/BadRequest' }
        "404": { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [Sessions]
      summary: Remove uma sessão
      parameters:
        - $ref: '#/components/parameters/XUserId'
        - $ref: '#/components/parameters/SessionIdPath'
      responses:
        "204": { description: removido }
        "404": { $ref: '#/components/responses/NotFound' }

  # ============== SETS ==============
  /api/sessions/{id}/sets:
    get:
      tags: [Sets]
      summary: Lista sets de uma sessão
      parameters:
        - $ref: '#/components/parameters/SessionIdPath'
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetsListResponse'
    post:
      tags: [Sets]
      summary: Cria set em uma sessão (com guarda por dono)
      parameters:
        - $ref: '#/components/parameters/XUserId'
        - $ref: '#/components/parameters/SessionIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSetInput'
      responses:
        "201":
          description: criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSet'
        "404": { $ref: '#/components/responses/NotFound' }

  /api/sets/{id}:
    patch:
      tags: [Sets]
      summary: Atualiza um set
      parameters:
        - $ref: '#/components/parameters/XUserId'
        - $ref: '#/components/parameters/SetIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchSetInput'
      responses:
        "204": { description: atualizado }
        "404": { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [Sets]
      summary: Remove um set
      parameters:
        - $ref: '#/components/parameters/XUserId'
        - $ref: '#/components/parameters/SetIdPath'
      responses:
        "204": { description: removido }
        "404": { $ref: '#/components/responses/NotFound' }

  /api/sets/batch:
    patch:
      tags: [Sets]
      summary: Atualiza vários sets em lote
      parameters:
        - $ref: '#/components/parameters/XUserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetsBatchPatchInput'
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetsBatchPatchResponse'
        "400": { $ref: '#/components/responses/BadRequest' }

  # ============ OVERLOAD ============
  /api/overload/suggest:
    get:
      tags: [Overload]
      summary: Sugestão de carga (GET)
      parameters:
        - $ref: '#/components/parameters/ExercicioIdQuery'
        - $ref: '#/components/parameters/WindowQuery'
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverloadSuggestResponse'
        "400": { $ref: '#/components/responses/BadRequest' }
    post:
      tags: [Overload]
      summary: Sugestão de carga (POST)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OverloadSuggestRequest'
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverloadSuggestResponse'

  /api/suggestions/next-load:
    get:
      tags: [Overload]
      summary: Legacy - sugestão de carga
      parameters:
        - $ref: '#/components/parameters/ExercicioIdQuery'
        - $ref: '#/components/parameters/WindowQuery'
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverloadSuggestResponse'

  # ============== ME ================
  /api/me/profile:
    get:
      tags: [Me]
      summary: Perfil do usuário
      parameters:
        - $ref: '#/components/parameters/XUserIdRequired'
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeProfile'
        "401": { $ref: '#/components/responses/Unauthorized' }
    patch:
      tags: [Me]
      summary: Atualiza perfil (parcial)
      parameters:
        - $ref: '#/components/parameters/XUserIdRequired'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeProfilePatch'
      responses:
        "200":
          description: perfil atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeProfile'
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }

  /api/me/metrics:
    get:
      tags: [Me]
      summary: Métricas pessoais de uso/sugestão
      parameters:
        - $ref: '#/components/parameters/XUserIdRequired'
        - in: query
          name: top
          schema: { type: integer, default: 5 }
          description: Quantidade de exercícios no ranking.
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeMetricsResponse'
        "401": { $ref: '#/components/responses/Unauthorized' }

  # ============ ADMIN ==============
  /api/admin/overload/refresh:
    post:
      tags: [Admin]
      summary: Atualiza MV de overload (REFRESH MATERIALIZED VIEW)
      parameters:
        - $ref: '#/components/parameters/XAdminToken'
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }

  /api/admin/overload/logs:
    get:
      tags: [Admin]
      summary: Lista logs de sugestões de overload
      parameters:
        - $ref: '#/components/parameters/XAdminToken'
        - in: query
          name: limit
          schema: { type: integer, default: 100 }
      responses:
        "200":
          description: ok

  /api/admin/overload/stats:
    get:
      tags: [Admin]
      summary: Estatísticas agregadas de overload
      parameters:
        - $ref: '#/components/parameters/XAdminToken'
      responses:
        "200":
          description: ok

  /api/admin/overload/export.csv:
    get:
      tags: [Admin]
      summary: Exporta CSV de logs de overload
      parameters:
        - $ref: '#/components/parameters/XAdminToken'
      responses:
        "200":
          description: CSV
          content:
            text/csv:
              schema:
                type: string
                format: binary

  # ============ PLANNER ============
  /api/plan/weekly:
    get:
      tags: [Planner]
      summary: Gera planner semanal
      responses:
        "200":
          description: ok

  /api/plan/weekly/save:
    post:
      tags: [Planner]
      summary: Salva planner semanal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: ok

components:
  parameters:
    XUserId:
      in: header
      name: X-User-ID
      required: false
      schema: { type: string }
      description: Identificador do usuário (enquanto JWT não está em todos os clientes).
    XUserIdRequired:
      in: header
      name: X-User-ID
      required: true
      schema: { type: string }
      description: Identificador do usuário (obrigatório neste endpoint).
    XAdminToken:
      in: header
      name: X-Admin-Token
      required: false
      schema: { type: string }
      description: Token administrativo (se **ADMIN_TOKEN** estiver configurado).
    Page:
      in: query
      name: page
      schema: { type: integer, default: 1, minimum: 1 }
    PageSize:
      in: query
      name: page_size
      schema: { type: integer, default: 20, minimum: 1, maximum: 100 }
    TreinoIdQuery:
      in: query
      name: treino_id
      schema: { type: integer, format: int64 }
    TreinoIdPath:
      in: path
      name: id
      required: true
      schema: { type: integer, format: int64 }
    SessionIdPath:
      in: path
      name: id
      required: true
      schema: { type: integer, format: int64 }
    SetIdPath:
      in: path
      name: id
      required: true
      schema: { type: integer, format: int64 }
    FromTS:
      in: query
      name: from
      schema: { type: string, format: date-time }
      description: Timestamp inicial (RFC3339).
    ToTS:
      in: query
      name: to
      schema: { type: string, format: date-time }
      description: Timestamp final (RFC3339).
    ExercicioIdQuery:
      in: query
      name: exercicio_id
      required: true
      schema: { type: integer, format: int64 }
    WindowQuery:
      in: query
      name: window
      required: false
      schema: { type: integer, default: 12, minimum: 1 }
      description: Janela de histórico (semanas/treinos) para cálculo.

  responses:
    BadRequest:
      description: Requisição inválida
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: Não encontrado
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Unauthorized:
      description: Não autorizado
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  schemas:
    Error:
      type: object
      properties:
        error: { type: string }
        message: { type: string }

    # -------- Sessions --------
    CreateSessionInput:
      type: object
      required: [treino_id]
      properties:
        treino_id: { type: integer, format: int64 }
        session_at:
          type: string
          format: date-time
          description: RFC3339; se omitido, agora (UTC).
        notes: { type: string }

    PatchSessionInput:
      type: object
      properties:
        completed: { type: boolean }
        rpe_session: { type: integer, minimum: 1, maximum: 10 }
        duration_min: { type: integer, minimum: 0 }
        notes: { type: string }
        session_at: { type: string, format: date-time }

    WorkoutSession:
      type: object
      properties:
        id: { type: integer, format: int64 }
        treino_id: { type: integer, format: int64 }
        session_at: { type: string, format: date-time }
        notes: { type: string }
        completed: { type: boolean }
        duration_min:
          type: integer
          description: Pode ser nulo no banco; omitido no JSON quando ausente.
        rpe_session:
          type: integer
          description: Pode ser nulo no banco; omitido no JSON quando ausente.
        user_id:
          type: string
          description: Pode ser omitido quando sessão é legada (NULL).
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    WorkoutSessionListResponse:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/WorkoutSession' }
        page: { type: integer }
        page_size: { type: integer }
        total_hint: { type: integer }

    # ---------- Sets ----------
    WorkoutSet:
      type: object
      properties:
        id: { type: integer, format: int64 }
        session_id: { type: integer, format: int64 }
        exercicio_id: { type: integer, format: int64 }
        series: { type: integer }
        repeticoes: { type: integer }
        carga_kg: { type: number, format: double, description: Pode estar ausente. }
        rir: { type: integer, description: Pode estar ausente. }
        completed: { type: boolean }
        notes: { type: string }

    SetsListResponse:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/WorkoutSet' }

    CreateSetInput:
      type: object
      required: [exercicio_id, series, repeticoes]
      properties:
        exercicio_id: { type: integer, format: int64 }
        series: { type: integer, minimum: 1 }
        repeticoes: { type: integer, minimum: 1 }
        carga_kg: { type: number, format: double }
        rir: { type: integer, minimum: 0, maximum: 10 }
        completed: { type: boolean }
        notes: { type: string }

    PatchSetInput:
      type: object
      properties:
        completed: { type: boolean }
        rir: { type: integer, minimum: 0, maximum: 10 }
        carga_kg: { type: number, format: double }
        repeticoes: { type: integer, minimum: 1 }
        notes: { type: string }

    SetsBatchPatchInput:
      type: object
      properties:
        items:
          type: array
          minItems: 1
          items:
            type: object
            required: [id]
            properties:
              id: { type: integer, format: int64 }
              completed: { type: boolean }
              rir: { type: integer, minimum: 0, maximum: 10 }
              carga_kg: { type: number, format: double }
              repeticoes: { type: integer, minimum: 1 }
              notes: { type: string }

    SetsBatchPatchResponse:
      type: object
      properties:
        updated: { type: integer, description: Quantidade de linhas afetadas. }

    # -------- Overload --------
    OverloadSuggestRequest:
      type: object
      required: [exercicio_id]
      properties:
        exercicio_id: { type: integer, format: int64 }
        window: { type: integer, default: 12, minimum: 1 }

    OverloadSuggestResponse:
      type: object
      properties:
        suggested_carga_kg: { type: number, format: double }
        suggested_repeticoes: { type: integer }
        rationale: { type: string }
        avg_carga_kg: { type: number, format: double }
        avg_rir: { type: number, format: double }
        sample_count: { type: integer }

    # --------- Me ----------
    MeProfile:
      type: object
      properties:
        user_id: { type: string }
        height_cm: { type: integer, minimum: 50, maximum: 250 }
        weight_kg: { type: number, format: double, minimum: 25, maximum: 350 }
        birth_year: { type: integer, minimum: 1900, maximum: 2100 }
        gender: { type: string, enum: [male, female, other] }
        level: { type: string }
        goal: { type: string }
        updated_at: { type: string, format: date-time }

    MeProfilePatch:
      type: object
      properties:
        height_cm: { type: integer, minimum: 50, maximum: 250 }
        weight_kg: { type: number, format: double, minimum: 25, maximum: 350 }
        birth_year: { type: integer, minimum: 1900, maximum: 2100 }
        gender: { type: string, enum: [male, female, other] }
        level: { type: string }
        goal: { type: string }

    MeMetricsResponse:
      type: object
      properties:
        user_id: { type: string }
        range:
          type: object
          properties:
            from: { type: string, format: date-time }
            to: { type: string, format: date-time }
        windows:
          type: object
          properties:
            last_7d: { type: integer }
            last_30d: { type: integer }
        totals:
          type: object
          properties:
            requests: { type: integer }
            unique_exercises: { type: integer }
            avg_suggested_carga_kg: { type: number, format: double }
            avg_rir: { type: number, format: double }
            avg_sample_count: { type: number, format: double }
        top_exercises:
          type: array
          items:
            type: object
            properties:
              exercicio_id: { type: integer, format: int64 }
              requests: { type: integer }
              avg_suggested_carga_kg: { type: number, format: double }
              last_requested_at: { type: string, format: date-time }
